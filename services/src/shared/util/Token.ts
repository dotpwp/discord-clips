import { TokenData } from "../../types/Token";
import { envProd } from "../..";
import Froppy from "./Froppy";
import Safe from "./Safe";
import { createHmac } from "crypto";

class Token {
    private KEY = process.env.WEB_SIGNATURE || "my-secret"
    constructor() {
        if (this.KEY === "my-secret") {
            Froppy.warn("TOKEN", `Option "WEB_SIGNATURE" is not set, using default secret!`)
            if (envProd) process.exit(1)
        }
    }
    /**
     * Creates JSON Web Token for User Authentication
     * @param tokenData - Data to be stored in the token
    */
    public createUserToken(tokenData: TokenData): string {
        const payload = Buffer
            .from(Safe.jsonStringify(tokenData))
            .toString("base64url")

        const signature = createHmac("sha256", this.KEY)
            .update(payload)
            .digest("base64url")

        return payload + "." + signature
    }
    /**
     * Decodes token previously generated by server
     * Returns false if token is invalid or malformed
     * @param someToken - A string you believe to be a token
    */
    public decodeUserToken(someToken: string): TokenData | false {
        if (!someToken) return false
        const [givenPayload, givenSignature] = someToken.split(".", 2)
        if (!givenPayload || !givenSignature) return false

        // Validate Token Signature
        const realSignature = createHmac("sha256", this.KEY)
            .update(givenPayload)
            .digest("base64url")
        if (givenSignature !== realSignature) return false

        try {
            // Parse token payload and validate fields
            const tokenJSON: TokenData = JSON.parse(Buffer.from(givenPayload, "base64url").toString())
            if (tokenJSON.iat > Date.now()) return false    // Token is from the future???
            if (tokenJSON.eat > Date.now()) return false    // Token is expired!
            tokenJSON.uid = BigInt(tokenJSON.uid)           // Parse User ID as bigint
            return tokenJSON
        } catch (_) {
            // Invalid JSON string or fields were given
            return false
        }
    }
}

export default new Token()